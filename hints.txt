1. Metamask browser extension was injecting some unwanted networks.
So it should be disabled during the development process (or it must be connected with a local geth instance)


2. Private network `truffle deploy` might not work without an explicit gas limit
https://ethereum.stackexchange.com/questions/21262/truffle-deployment-on-test-network-says-error-exceeds-block-gas-limit


3. During contract deployment plain account unlocking might be insufficient.
Time in seconds should be submitted to keep the accounts open long enough.

```
personal.unlockAccount(eth.accounts[0], "<your password>", 15000)
```

https://ethereum.stackexchange.com/questions/11908/account-is-locked-after-running-truffle-migrate-command




4. Events do not work via RPC. Only web socket provider is required for that.

I subscribed to the event but it was not working. The callback was never called. Then I found out that I needed to activate the WebSockets server (--ws and similar in geth).
Found it in this Ethereum Stack Exchange Post


https://github.com/ethereum/web3.js/issues/989



5. ganache-cli listens to websockets on the same port as one for RPC connections
** because HTTP polling is inefficient. 
** P.S. should have guessed before.

[?] why is HttpProvider a default option in the react truffle box ?




6. Contract method callback is the place where all fired events are available.
Site GUI can be updated here.
Other types of event listening are worse for this kind of task (given the current contract logic)


```
await contract.DoWork(args, {from: '0xdeadbeaf', gas: 20000})
```



7. truffle box react scripts must be upgraded

```
npm install react-scripts@>=2.0.0 --save
```


8. Ipfs fails to render the site properly while "serve" mini web server does.
Just like ```npm run start```


```
serve -s /home/adk/projects/ethereum_learn/my_small_projects/splitter-react/client/build
```



9. 
